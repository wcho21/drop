---
const { display = true } = Astro.props;
---

<div class={`pl-4 border-l border-l-gray-700 quote-component ${display ? "my-10" : "my-2"}`}>
  <div class="mb-1.5">
    <slot />
  </div>
  <div class="text-[13.25px] md:text-[14.5px] font-light unfold-on-hover-component" data-status="folded">
    <div class="pb-1.5">
      <slot name="detail" />
    </div>
  </div>
  <div class="text-[13.25px] md:text-[14.5px] font-light">
    <slot name="name" />
  </div>
</div>

<script>
  const quotes = document.querySelectorAll(".quote-component");
  const unfoldOnHovers = document.querySelectorAll(".unfold-on-hover-component");
  quotes.forEach((quote, i) => {
    const unfoldOnHover = unfoldOnHovers[i];
    if (!(unfoldOnHover instanceof HTMLElement)) {
      throw new Error(`Expected 'HTMLElement', but received ${unfoldOnHover.className}`);
    }
    const hasContent = unfoldOnHover.textContent === null || unfoldOnHover.textContent.length > 0;
    if (!hasContent) {
      return; // ignore silently; no need to unfold
    }

    quote.addEventListener("mouseenter", () => {
      unfoldOnHover.dataset.status = "unfolded";
      unfoldOnHover.style.maxHeight = `${unfoldOnHover.scrollHeight}px`;
    });
    quote.addEventListener("mouseleave", () => {
      unfoldOnHover.dataset.status = "folded";
      unfoldOnHover.style.maxHeight = "0px";
    });
  });
</script>

<style>
  .unfold-on-hover-component {
    max-height: 0;
    transform-origin: top;
    transition-property: opacity, max-height, transform;
    transition-duration: 0.3s;
    transition-timing-function: ease;
  }

  .unfold-on-hover-component[data-status="folded"] {
    transform: scaleY(0);
    opacity: 0;
    transition-delay: 0s;
  }

  .unfold-on-hover-component[data-status="unfolded"] {
    transform: scaleY(1);
    opacity: 1;
    transition-delay: 0.8s;
  }
</style>
