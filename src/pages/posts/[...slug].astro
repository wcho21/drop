---
import type { CollectionEntry } from "astro:content";
import { getCollection, render } from "astro:content";
import Heading from "@/components/core/Heading.astro";
import Home from "@/components/icon/Home.astro";
import ArticleCard from "@/components/page/ArticleCard.astro";
import Giscus from "@/components/post/Giscus.astro";
import Share from "@/components/post/ShareButton.astro";
import Base from "@/layouts/Base.astro";
import { getThumbnails } from "@/scripts/utils/assets";
import { groupSeriesAsMap, sortBlogCollectionByDate } from "@/scripts/utils/collections";
import { formatDate } from "@/scripts/utils/formatters";

type Entry = CollectionEntry<"blog">;

export async function getStaticPaths() {
  const entries = sortBlogCollectionByDate(await getCollection("blog"));
  const seriesMap = groupSeriesAsMap(entries);

  const getNextEntry = (entries: Entry[], i: number) => {
    return i > 0 ? entries[i - 1] : undefined;
  };
  const getNextEntryInSeries = (entries: Entry[], i: number) => {
    const entry = entries[i];
    const seriesName = entry.data.series;
    if (seriesName === undefined) {
      return undefined;
    }

    const series = seriesMap.get(seriesName);
    if (series === undefined) {
      console.warn(`Not found series names '${seriesName}'.`);
      return undefined;
    }

    const indexInSeries = series.findIndex(e => e.id === entry.id);
    return getNextEntry(series, indexInSeries);
  };

  const staticPaths = entries.map((entry, i) => ({
    params: { slug: entry.id },
    props: {
      nextEntry: getNextEntry(entries, i),
      nextEntryInSeries: getNextEntryInSeries(entries, i),
      entry,
    },
  }));

  return staticPaths;
}
interface Props {
  entry: Entry;
  nextEntry?: Entry;
  nextEntryInSeries?: Entry;
}

const { entry, nextEntry, nextEntryInSeries } = Astro.props;
const { href } = Astro.url;
const { title, summary, date } = entry.data;
const { Content } = await render(entry);

const image = getThumbnails()[entry.data.thumbnail];
---

<Base pageTitle={title} desc={summary} image={image}>
  <div>
    <header class="mt-10">
      <p class="font-medium text-[22px] md:text-[30px]">{title}</p>
      <p class="text-gray-600">{summary}</p>
      <p class="mt-3 text-[14px] text-gray-400 font-light"><time>{formatDate(date)}</time></p>
    </header>

    <main id="post-main" class="my-10 pt-10 border-t border-gray-300">
      <Content />
    </main>
  </div>

  <div class="my-10 flex">
    <div class="mx-auto">
      <Share url={href} title={title} />
    </div>
  </div>

  <div class="my-10 pt-10 border-t border-gray-800">
    {
      import.meta.env.PROD ? (
        <Giscus />
      ) : (
        <p style="text-align: center">
          (Giscus will be rendered here on production mode)
        </p>
      )
    }
  </div>

  <nav id="post-nav" class="my-10 pt-10 border-t border-gray-800">
    {
      nextEntryInSeries !== undefined && (
        <p>
          <span class="px-2 py-1 bg-gray-100 rounded-md text-sm text-gray-400 font-normal">
            이 시리즈의 다음 글
          </span>
        </p>
        <ArticleCard article={nextEntryInSeries} />
      )
    }
    {
      (nextEntryInSeries === undefined) && (nextEntry !== undefined) && (
        <p>
          <span class="px-2 py-1 bg-gray-100 rounded-md text-sm text-gray-400 font-normal">
            관심 있을 만한 글
          </span>
        </p>
        <ArticleCard article={nextEntry} />
      )
    }
    <div class="mt-4">
      <a href="/" class="block py-1.5 px-3 mx-auto w-fit">
        <Home />
      </a>
    </div>
  </nav>
</Base>

<style is:global>
  @reference "tailwindcss";

  #post-main {
    @apply text-[14px] md:text-[16px] text-gray-800 text-justify;
  }

  #post-main .serif {
    @apply font-serif;
  }

  #post-main > h1 {
    @apply text-[20px] md:text-[24px] font-bold mt-16 mb-2 font-serif;
  }

  #post-main > h2 {
    @apply text-[16px] md:text-[18px] font-bold mt-8 mb-2 font-serif;
  }

  #post-main > p {
    @apply my-2;
  }

  #post-main code {
    @apply tracking-tight;
  }

  #post-main > .astro-code {
    @apply my-2 text-[0.875em] border-l border-gray-500 text-left whitespace-pre-wrap pl-[1.25em];
  }

  #post-main > .astro-code.has-diff {
    position: relative;
  }

  #post-main > .astro-code span.line {
    @apply inline-block ml-[-1.25em] pl-[1.25em];
  }

  #post-main > .astro-code span.line.highlighted {
    @apply bg-sky-100;
    width: calc(100% + 1.25em);
  }

  #post-main > .astro-code span.line.highlighted.warning {
    @apply bg-amber-100;
    width: calc(100% + 1.25em);
  }

  #post-main > .astro-code span.line.highlighted.error {
    @apply bg-rose-100;
    width: calc(100% + 1.25em);
  }

  #post-main > .astro-code span.line.diff.add {
    @apply bg-emerald-100;
    width: calc(100% + 1.25em);
  }

  #post-main > .astro-code span.line.diff.add::before {
    @apply text-emerald-400 absolute left-0 w-[1.25em] inline-block text-center;
    content: "+";
  }

  #post-main > .astro-code span.line.diff.remove {
    @apply bg-rose-100;
    width: calc(100% + 1.25em);
  }

  #post-main > .astro-code span.line.diff.remove::before {
    @apply text-rose-400 absolute left-0 w-[1.25em] inline-block text-center;
    content: "-";
  }

  #post-main > .astro-code .highlighted-word {
    @apply bg-yellow-200;
  }

  #post-main > .katex-display {
    @apply overflow-x-auto overflow-y-hidden;
  }

  #post-main > .katex-display > .katex > .katex-html > .tag {
    right: 0.25ex; /* hackish code; to remove scroll that \tag{} makes */
  }

  #post-main a {
    @apply text-blue-500;
  }

  #post-main > ul,
  #post-main > ol {
    @apply ml-6;
  }

  #post-main > ul > li,
  #post-main > ol > li {
    @apply my-2;
  }

  #post-main > ul > li > strong,
  #post-main > ol > li > strong {
    @apply font-semibold;
  }

  #post-main > ol > li {
    @apply list-decimal;
  }

  #post-main > ul > li {
    @apply list-disc;
  }
</style>
